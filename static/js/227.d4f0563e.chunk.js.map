{"version":3,"file":"static/js/227.d4f0563e.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profileinfo/ProfileInfo.module.css?faff","components/Profile/Profileinfo/ProfileStatusWithHooks.tsx","components/Profile/Profileinfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainers.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__F+wn-\",\"mainPhoto\":\"ProfileInfo_mainPhoto__Apz37\",\"contact\":\"ProfileInfo_contact__7DF1F\",\"formSummaryError\":\"ProfileInfo_formSummaryError__JHXv0\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode} >{props.status || '----'}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n//return this.state.value != nextState.value","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\r\nimport userPhoto from \"../../../assets/images/image.png\";\r\nimport {ProfileType} from \"../../../Redux/profile-reducer\"\r\n\r\n\r\ntype ProfileInfo = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: string) => void\r\n    saveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfo) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    \r\n    if(!profile) {\r\n        return <Preloader/>\r\n        }\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if(e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n      saveProfile(formData)\r\n          .then(() => {\r\n          setEditMode(false)\r\n\r\n      })\r\n    }\r\n\r\n    return (\r\n            <div>\r\n                <div className={s.descriptionBlock}>\r\n                    <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                    {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                    {editMode\r\n                        && <ProfileData goToEditMode={() => setEditMode(true)} profile={profile} isOwner={isOwner}/>}\r\n\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport type ProfileData = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileData) => {\r\n   return <div>\r\n       {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n        <div><b>Full name</b>: {profile.fullName}</div>\r\n        <div><b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n        {profile.lookingForAJob &&\r\n            <div><b>My professional skills</b>{profile.lookingForAJob}</div>}\r\n        <div><b>About me</b>: {profile.aboutMe}</div>\r\n        <div><b>Contacts</b>: {Object.entries(profile.contacts).map(([title, link]) => {\r\n            return <Contact key={title} contactTitle={title} contactValue={link || ''}/>\r\n        })}</div>\r\n    </div>\r\n}\r\n\r\n\r\ntype Contacts = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: Contacts) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__3+ec1\",\"posts\":\"MyPosts_posts__Fvtwk\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__1pOK+\"};","import React from 'react';\r\nimport { PostsType } from '../../../../Redux/profile-reducer';\r\nimport s from './Post.module.css'\r\n\r\n\r\n\r\nconst Post = (props: PostsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSefb1P3f0DPKFHKiY2w9a6dz4m_DCL94ENvg&usqp=CAU'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {memo} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from \"./MyPostContainers\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required,} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst MyPosts = memo((props: MyPostsPropsType) => {\r\n\r\n\r\n    const postsElements =\r\n        props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} id={p.id}/>);\r\n\r\n    const onAddPost = (values: formDataType) => {\r\n        //props.dispatch({type: 'ADD-POST'})\r\n        //props.dispatch({type: \"ADD-POST\", postText: props.newPost })\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\ntype formDataType = {\r\n    ProfileAddNewPostForm: string\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\nconst AddNewPostForm:React.FC<InjectedFormProps<formDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name='newPostText' component={Textarea} placeholder='Post message' validate={[required, maxLength30]}/>\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\nconst AddNewPostFormRedux = reduxForm<formDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n\r\n\r\n","import React from 'react';\r\nimport {addPostCreator, PostsType} from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\ntype mapStatePropsType = {\r\n    posts: PostsType[]\r\n    newPostText: string\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n\r\n/*const MyPostsContainer = () => {\r\n\r\n\r\n    // const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\nreturn(\r\n    <StoreContext.Consumer>\r\n        {store => {\r\n            const state = store.getState()\r\n\r\n            const addPost = () => {\r\n            //props.dispatch({type: 'ADD-POST'})\r\n            //props.dispatch({type: \"ADD-POST\", postText: props.newPost })\r\n            state.dispatch(addPostCreator(state.newPost))\r\n        }\r\n\r\n            const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n                let text = e.currentTarget.value\r\n                let action = updateNewPostTextCreator(text);\r\n                // let action = {type: 'UPDATE-NEW-POST-TEXT', newText: text}\r\n                //props.dispatch(action)\r\n                // props.dispatch({type: 'UPDATE-NEW-POST-TEXT', newText: text})\r\n                state.dispatch(action)\r\n            }\r\n            return <MyPosts updateNewPostText={onPostChange}\r\n            addPost={addPost}\r\n            posts={state.profilePage.posts}\r\n            newPost={state.profilePage.newPostText}/>\r\n        }\r\n        }\r\n    </StoreContext.Consumer>\r\n);\r\n};*/\r\n","import React from 'react';\r\nimport ProfileInfo from \"./Profileinfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostContainers\";\r\nimport {ProfileType} from \"../../Redux/profile-reducer\";\r\n\r\ntype Profile = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status:string)=>void\r\n    isOwner:boolean\r\n    savePhoto:(file: string)=>void\r\n    saveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\n\r\nconst Profile = (props: Profile) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {\r\n    getStatus,\r\n    getUserProfileThunk,\r\n    ProfileType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../Redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorisedUserId: string\r\n    isAuth: boolean\r\n    isOwner: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunk: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: string) => void\r\n    saveProfile: (profile: ProfileType) => Promise<void>\r\n}\r\n\r\nexport type MapAndDispatchPostsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport type ProfileContainerPropsType = RouteComponentProps<PathParamsType> & MapAndDispatchPostsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, AppStateType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorisedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileThunk(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     saveProfile={this.props.saveProfile}\r\n                     savePhoto={this.props.savePhoto}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    isOwner: state.profilePage.isOwner\r\n})\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileThunk, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }}\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let connectedRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n    return connectedRedirectComponent\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileData","profile","isOwner","goToEditMode","onClick","fullName","lookingForAJob","aboutMe","Object","entries","contacts","map","title","link","Contact","contactTitle","contactValue","className","s","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","type","target","files","length","message","likesCount","MyPosts","memo","postsElements","posts","p","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength30","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","connect","state","profilePage","dispatch","addPostCreator","ProfileContainer","userId","this","match","params","authorisedUserId","history","push","getUserProfileThunk","getStatus","refreshProfile","prevProps","React","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}