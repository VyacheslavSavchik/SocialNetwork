{"version":3,"file":"static/js/449.6adaa9c0.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,IAAM,uB,mBCkB7M,EAZmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,0BACA,iBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,WACI,gBAAKD,UAAWC,EAAAA,IAAOC,IAAI,mHAC3B,SAAC,KAAD,CAASC,GAAIL,EAAb,SAAoBD,EAAMO,aCHtC,EAJgB,SAACP,GACb,OAAO,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMQ,W,uCCGvCC,GAAcC,EAAAA,EAAAA,GAAiB,IAiBxBC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAhB8B,SAACZ,GAC9D,OACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBF,KAAK,iBACLc,YAAY,0BAEvB,0BACI,6CCgBhB,EA9BgB,SAACrB,GAEb,IAAIsB,EAAQtB,EAAMuB,YAMdC,EAAkBF,EAAMG,QACvBC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAiBL,GAAIyB,EAAEzB,IAAZyB,EAAEzB,OAC3C0B,EAAmBN,EAAMO,SACxBH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAAoBN,GAAI4B,EAAE5B,IAAZ4B,EAAE5B,OAGlD,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,YAAhB,SACKoB,KAEL,iBAAKrB,UAAWC,EAAAA,SAAhB,WACI,yBAAMwB,KACN,0BACI,SAACjB,EAAD,CAAqBG,SAlBf,SAACiB,GACnB/B,EAAMgC,YAAYD,EAAOE,4B,6BCsBjC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfoB,SAACb,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACa,GACxB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAmBJ,SAOpCK,EAAAA,EAFJ,CAGEC,I,gIC3BIC,EAA6B,SAAClB,GAChC,MAAO,CACHmB,OAAQnB,EAAMoB,KAAKD,SAEpB,SAASH,EAAoBK,GAQhC,OADiCR,EAAAA,EAAAA,IAAQK,EAARL,EANjC,SAA2BnC,GACvB,IAAKyC,EAAwBzC,EAAxByC,OAAWG,GAAhB,OAA6B5C,EAA7B,GACA,OAAKyC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUtC,GAAG","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Hi5t3\",\"dialogItems\":\"Dialogs_dialogItems__-Bnnb\",\"active\":\"Dialogs_active__m4CCj\",\"messages\":\"Dialogs_messages__WNagn\",\"message\":\"Dialogs_message__xPMJB\",\"img\":\"Dialogs_img__aFAWp\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { DialogsType } from '../../../Redux/dialogs-reducer';\r\n\r\n\r\n\r\nconst DialogItem = (props: DialogsType) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div>\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img className={s.img} src='https://storage.yandexcloud.net/stage01-metronews-transfer/media/20220618/13/20/858x540_60e21547_dvindb8d.jpg'/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n\r\n/*\r\n<img className={s.img} src='https://www.sb.by/upload/iblock/05e/c43ymnipx6pipu7jizluazupuuifo09u.jpg'/>\r\n<img className={s.img} src='https://storage-api.petstory.ru/resize/1000x1000x80/cb/48/7f/cb487f4677a640329e92ac0076004607.jpeg'/>\r\n<img className={s.img} src='https://svetlo.media/upload//upload/news/769904666554.jpeg'/>\r\n<img className={s.img} src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRxs7zSqnMDIqg4J9zi1er-WBnYX82aQ1x6ew&usqp=CAU'/>*/\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport { MessagesType } from '../../../Redux/dialogs-reducer';\r\n\r\n\r\n\r\nconst Message = (props: MessagesType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type formDataType = {\r\n    dialogAddMessageForm: string\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm:React.FC<InjectedFormProps<formDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name='newMessageBody'\r\n                       placeholder='Enter your message'/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<formDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageFormRedux, formDataType} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    const addNewMessage = (values: formDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages\r\n        .map(m => <Message message={m.message} key={m.id} id={m.id}/>)\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Dialogs;\r\n","import {InitStateType, sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype mapStatePropsType = {\r\n    dialogsPage: InitStateType\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }}\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let connectedRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n    return connectedRedirectComponent\r\n}"],"names":["props","path","id","className","s","src","to","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}