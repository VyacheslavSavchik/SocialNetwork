{"version":3,"file":"static/js/737.a8a0f7a9.chunk.js","mappings":"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","sources":["components/Profile/Profileinfo/ProfileInfo.module.css","components/Profile/Profileinfo/ProfileStatusWithHooks.tsx","components/Profile/Profileinfo/Profileinfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainers.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__F+wn-\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode} >{props.status || '----'}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n//return this.state.value != nextState.value","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileContainerPropsType} from \"../ProfileContainer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}: ProfileContainerPropsType) => {\r\n    if(!profile) {\r\n        return <Preloader/>\r\n        }\r\n    return (\r\n            <div>\r\n                <div>\r\n                    {/*<img src='https://teleprogramma.pro/sites/default/files/nodes/node_19852_1653762796.jpg'/>*/}\r\n                </div>\r\n                <div className={s.descriptionBlock}>\r\n                    <img src={profile.photos.large}/>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__3+ec1\",\"posts\":\"MyPosts_posts__Fvtwk\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__1pOK+\"};","import React from 'react';\r\nimport { PostsType } from '../../../../Redux/profile-reducer';\r\nimport s from './Post.module.css'\r\n\r\n\r\n\r\nconst Post = (props: PostsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSefb1P3f0DPKFHKiY2w9a6dz4m_DCL94ENvg&usqp=CAU'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {memo} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from \"./MyPostContainers\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required,} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst MyPosts = memo((props: MyPostsPropsType) => {\r\n\r\n\r\n    const postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} id={p.id}/>);\r\n\r\n    const onAddPost = (values: formDataType) => {\r\n        //props.dispatch({type: 'ADD-POST'})\r\n        //props.dispatch({type: \"ADD-POST\", postText: props.newPost })\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\ntype formDataType = {\r\n    ProfileAddNewPostForm: string\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\nconst AddNewPostForm:React.FC<InjectedFormProps<formDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name='newPostText' component={Textarea} placeholder='Post message' validate={[required, maxLength30]}/>\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\nconst AddNewPostFormRedux = reduxForm<formDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts;\r\n\r\n\r\n// const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n","import React from 'react';\r\nimport {addPostCreator, PostsType} from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\ntype mapStatePropsType = {\r\n    posts: PostsType[]\r\n    newPostText: string\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n\r\n\r\n\r\n\r\n/*const MyPostsContainer = () => {\r\n\r\n\r\n    // const newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\nreturn(\r\n    <StoreContext.Consumer>\r\n        {store => {\r\n            const state = store.getState()\r\n\r\n            const addPost = () => {\r\n            //props.dispatch({type: 'ADD-POST'})\r\n            //props.dispatch({type: \"ADD-POST\", postText: props.newPost })\r\n            state.dispatch(addPostCreator(state.newPost))\r\n        }\r\n\r\n            const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n                let text = e.currentTarget.value\r\n                let action = updateNewPostTextCreator(text);\r\n                // let action = {type: 'UPDATE-NEW-POST-TEXT', newText: text}\r\n                //props.dispatch(action)\r\n                // props.dispatch({type: 'UPDATE-NEW-POST-TEXT', newText: text})\r\n                state.dispatch(action)\r\n            }\r\n            return <MyPosts updateNewPostText={onPostChange}\r\n            addPost={addPost}\r\n            posts={state.profilePage.posts}\r\n            newPost={state.profilePage.newPostText}/>\r\n        }\r\n        }\r\n    </StoreContext.Consumer>\r\n);\r\n};*/\r\n","import React from 'react';\r\nimport ProfileInfo from \"./Profileinfo/Profileinfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostContainers\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\n\r\n\r\nconst Profile = (props: ProfileContainerPropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                getStatus={props.getStatus}\r\n                profile={props.profile}\r\n                getUserProfileThunk={props.getUserProfileThunk}\r\n                history={props.history}\r\n                location={props.location}\r\n                match={props.match}\r\n                staticContext={props.staticContext}\r\n                authorisedUserId={props.authorisedUserId}\r\n                isAuth={props.isAuth}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {getStatus, getUserProfileThunk, ProfileType, updateStatus} from \"../../Redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorisedUserId: string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunk: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport type MapAndDispatchPostsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport type ProfileContainerPropsType = RouteComponentProps<PathParamsType> & MapAndDispatchPostsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, AppStateType>{\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            userId = this.props.authorisedUserId;\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileThunk(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n           <Profile {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileThunk, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }}\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let connectedRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n    return connectedRedirectComponent\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","className","s","src","photos","large","Preloader","message","likesCount","MyPosts","memo","postsElements","posts","map","p","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength30","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","connect","state","profilePage","dispatch","addPostCreator","getStatus","getUserProfileThunk","history","location","match","staticContext","authorisedUserId","isAuth","ProfileContainer","userId","this","params","push","React","compose","auth","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}